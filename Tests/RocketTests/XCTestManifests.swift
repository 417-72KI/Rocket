#if !canImport(ObjectiveC)
    import XCTest

    extension BranchExecutorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
        // to regenerate.
        static let __allTests__BranchExecutorTests = [
            ("testItSendsEmptyScriptIfTheDictionaryIsNil", testItSendsEmptyScriptIfTheDictionaryIsNil),
            ("testItSendsTheCorrectBranchNameToScriptLauncher", testItSendsTheCorrectBranchNameToScriptLauncher),
            ("testItUsesAWorkaroundToGenerateTheTestsOnLinux", testItUsesAWorkaroundToGenerateTheTestsOnLinux),
        ]
    }

    extension ChecksParserTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
        // to regenerate.
        static let __allTests__ChecksParserTests = [
            ("testItIgnoresTheInvalidSteps", testItIgnoresTheInvalidSteps),
            ("testItParsesCorrectlyAValidDictionary", testItParsesCorrectlyAValidDictionary),
        ]
    }

    extension CleanGitStatusCheckTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
        // to regenerate.
        static let __allTests__CleanGitStatusCheckTests = [
            ("testReturnsFailureWhenThereIsAreModifiedFiles", testReturnsFailureWhenThereIsAreModifiedFiles),
            ("testReturnsSuccessWhenThereIsAreNoModifiedFiles", testReturnsSuccessWhenThereIsAreNoModifiedFiles),
        ]
    }

    extension CommitExecutorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
        // to regenerate.
        static let __allTests__CommitExecutorTests = [
            ("testItSetsTheParameterIfTheGitHookFolderExists", testItSetsTheParameterIfTheGitHookFolderExists),
            ("testItUsesAWorkaroundToGenerateTheTestsOnLinux", testItUsesAWorkaroundToGenerateTheTestsOnLinux),
            ("testItUsesTheParametersIfAny", testItUsesTheParametersIfAny),
            ("testItUsesTheStandardCommitMessageIfNoMessageIsProvided", testItUsesTheStandardCommitMessageIfNoMessageIsProvided),
        ]
    }

    extension CurrentVersionProviderTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
        // to regenerate.
        static let __allTests__CurrentVersionProviderTests = [
            ("testItReturnsTheCorrectTag", testItReturnsTheCorrectTag),
            ("testItReturnsTheCorrectVersionIfThereAreNoTags", testItReturnsTheCorrectVersionIfThereAreNoTags),
        ]
    }

    extension DefaultExecutorStepDescriptionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
        // to regenerate.
        static let __allTests__DefaultExecutorStepDescriptionTests = [
            ("testItShowsTheCorrectEndDescriptionWhenThereAreNoParameters", testItShowsTheCorrectEndDescriptionWhenThereAreNoParameters),
            ("testItShowsTheCorrectEndDescriptionWhenThereAreParameters", testItShowsTheCorrectEndDescriptionWhenThereAreParameters),
            ("testItShowsTheCorrectStartDescriptionWhenThereAreNoParameters", testItShowsTheCorrectStartDescriptionWhenThereAreNoParameters),
            ("testItShowsTheCorrectStartDescriptionWhenThereAreParameters", testItShowsTheCorrectStartDescriptionWhenThereAreParameters),
        ]
    }

    extension DevDependenciesModifierTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
        // to regenerate.
        static let __allTests__DevDependenciesModifierTests = [
            ("testItHidesTheDependenciesCorrectly", testItHidesTheDependenciesCorrectly),
            ("testItShowsTheDependenciesCorrectly", testItShowsTheDependenciesCorrectly),
        ]
    }

    extension GitAddExecutorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
        // to regenerate.
        static let __allTests__GitAddExecutorTests = [
            ("testItDoesntSendAnyCommandToTheScriptLauncherIfTheDictionaryIsNil", testItDoesntSendAnyCommandToTheScriptLauncherIfTheDictionaryIsNil),
            ("testItSendsTheCorrectPathsToTheScriptLauncher", testItSendsTheCorrectPathsToTheScriptLauncher),
            ("testItUsesAWorkaroundToGenerateTheTestsOnLinux", testItUsesAWorkaroundToGenerateTheTestsOnLinux),
        ]
    }

    extension HideDevDependenciesExecutorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
        // to regenerate.
        static let __allTests__HideDevDependenciesExecutorTests = [
            ("testItSendsTheHideDependenciesCallToTheDevDependenciesModifier", testItSendsTheHideDependenciesCallToTheDevDependenciesModifier),
            ("testItUsesTheDefaultPackagePath", testItUsesTheDefaultPackagePath),
        ]
    }

    extension NewVersionProviderTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
        // to regenerate.
        static let __allTests__NewVersionProviderTests = [
            ("testReturnsTheCorrectNewVersion", testReturnsTheCorrectNewVersion),
        ]
    }

    extension PushExecutorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
        // to regenerate.
        static let __allTests__PushExecutorTests = [
            ("testItAddsTheNoVerifyParameterIfGitHookFolderIsPresent", testItAddsTheNoVerifyParameterIfGitHookFolderIsPresent),
            ("testItSendsTheCorrectScriptContent", testItSendsTheCorrectScriptContent),
            ("testItSendsTheNoVerifyParameterIfRequired", testItSendsTheNoVerifyParameterIfRequired),
            ("testItUsesAWorkaroundToGenerateTheTestsOnLinux", testItUsesAWorkaroundToGenerateTheTestsOnLinux),
        ]
    }

    extension RocketFileFinderTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
        // to regenerate.
        static let __allTests__RocketFileFinderTests = [
            ("testItReturnsNilIfThereAreNoArgumentsAndTheDefaultFileDoesntExist", testItReturnsNilIfThereAreNoArgumentsAndTheDefaultFileDoesntExist),
            ("testItReturnsTheArgumentPathIfPresent", testItReturnsTheArgumentPathIfPresent),
            ("testItReturnsTheDefaultPathIfNoArgsAreThereAndTheFileExists", testItReturnsTheDefaultPathIfNoArgsAreThereAndTheFileExists),
        ]
    }

    extension ScriptExecutorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
        // to regenerate.
        static let __allTests__ScriptExecutorTests = [
            ("testItDoesntSendAnyCommandToTheScriptLauncherIfTheContentIsEmpty", testItDoesntSendAnyCommandToTheScriptLauncherIfTheContentIsEmpty),
            ("testItDoesntSendAnyCommandToTheScriptLauncherIfTheDictionaryIsNil", testItDoesntSendAnyCommandToTheScriptLauncherIfTheDictionaryIsNil),
            ("testItSendsTheCorrectScriptToTheScriptLauncher", testItSendsTheCorrectScriptToTheScriptLauncher),
            ("testItUsesAWorkaroundToGenerateTheTestsOnLinux", testItUsesAWorkaroundToGenerateTheTestsOnLinux),
        ]
    }

    extension ScriptLauncherTestCase {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
        // to regenerate.
        static let __allTests__ScriptLauncherTestCase = [
            ("testItUsesAWorkaroundToGenerateTheTestsOnLinux", testItUsesAWorkaroundToGenerateTheTestsOnLinux),
        ]
    }

    extension StepsParserTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
        // to regenerate.
        static let __allTests__StepsParserTests = [
            ("testItCreatesAScriptStepForNotRecognisedStrings", testItCreatesAScriptStepForNotRecognisedStrings),
            ("testItIgnoresTheInvalidSteps", testItIgnoresTheInvalidSteps),
            ("testItParsesCorrectlyAValidDictionary", testItParsesCorrectlyAValidDictionary),
            ("testItParsesCorrectlyBeforeAndAfterSteps", testItParsesCorrectlyBeforeAndAfterSteps),
            ("testItParsesCorrectlyWhenOnlyAfterIsSpecified", testItParsesCorrectlyWhenOnlyAfterIsSpecified),
            ("testItParsesCorrectlyWhenOnlyBeforeIsSpecified", testItParsesCorrectlyWhenOnlyBeforeIsSpecified),
            ("testItParsesItReturnsTheDefaultParametersIfTheDictionaryIsEmpty", testItParsesItReturnsTheDefaultParametersIfTheDictionaryIsEmpty),
        ]
    }

    extension SwiftScriptExecutorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
        // to regenerate.
        static let __allTests__SwiftScriptExecutorTests = [
            ("testItCreatesTheCorrectProcess", testItCreatesTheCorrectProcess),
            ("testItDoesntCreateTheProcessIfThereIsNoScriptPath", testItDoesntCreateTheProcessIfThereIsNoScriptPath),
            ("testItPassesTheArgumentsToTheProcess", testItPassesTheArgumentsToTheProcess),
        ]
    }

    extension TagExecutorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
        // to regenerate.
        static let __allTests__TagExecutorTests = [
            ("testItSendsTheCorrectScriptToTheScriptLauncher", testItSendsTheCorrectScriptToTheScriptLauncher),
            ("testItUsesAWorkaroundToGenerateTheTestsOnLinux", testItUsesAWorkaroundToGenerateTheTestsOnLinux),
        ]
    }

    extension UnhideDevDependenciesExecutorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
        // to regenerate.
        static let __allTests__UnhideDevDependenciesExecutorTests = [
            ("testItSendsTheHideDependenciesCallToTheDevDependenciesModifier", testItSendsTheHideDependenciesCallToTheDevDependenciesModifier),
            ("testItUsesTheDefaultPackagePath", testItUsesTheDefaultPackagePath),
        ]
    }

    public func __allTests() -> [XCTestCaseEntry] {
        return [
            testCase(BranchExecutorTests.__allTests__BranchExecutorTests),
            testCase(ChecksParserTests.__allTests__ChecksParserTests),
            testCase(CleanGitStatusCheckTests.__allTests__CleanGitStatusCheckTests),
            testCase(CommitExecutorTests.__allTests__CommitExecutorTests),
            testCase(CurrentVersionProviderTests.__allTests__CurrentVersionProviderTests),
            testCase(DefaultExecutorStepDescriptionTests.__allTests__DefaultExecutorStepDescriptionTests),
            testCase(DevDependenciesModifierTests.__allTests__DevDependenciesModifierTests),
            testCase(GitAddExecutorTests.__allTests__GitAddExecutorTests),
            testCase(HideDevDependenciesExecutorTests.__allTests__HideDevDependenciesExecutorTests),
            testCase(NewVersionProviderTests.__allTests__NewVersionProviderTests),
            testCase(PushExecutorTests.__allTests__PushExecutorTests),
            testCase(RocketFileFinderTests.__allTests__RocketFileFinderTests),
            testCase(ScriptExecutorTests.__allTests__ScriptExecutorTests),
            testCase(ScriptLauncherTestCase.__allTests__ScriptLauncherTestCase),
            testCase(StepsParserTests.__allTests__StepsParserTests),
            testCase(SwiftScriptExecutorTests.__allTests__SwiftScriptExecutorTests),
            testCase(TagExecutorTests.__allTests__TagExecutorTests),
            testCase(UnhideDevDependenciesExecutorTests.__allTests__UnhideDevDependenciesExecutorTests),
        ]
    }
#endif
